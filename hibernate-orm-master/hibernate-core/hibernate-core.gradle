/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
apply plugin: 'antlr'
apply plugin: 'hibernate-matrix-testing'

apply plugin: 'version-injection'
apply plugin: 'org.hibernate.build.gradle.xjc'

dependencies {
    compile( libraries.jta )
    compile( libraries.jpa )
    compile( libraries.javassist )
    compile( libraries.antlr )
    compile( libraries.jandex )

    // We need dom4j for a number of things temporarily:
    //      1) (unsupported) EntityMode.DOM4J support
    //      2) Envers
    //      3) hibernate-commons-annotations
    compile( libraries.dom4j )
    compile( libraries.commons_annotations )

    antlr( libraries.antlr )

    provided( libraries.ant )
    provided( libraries.jacc )
    provided( libraries.validation )
    provided( libraries.classmate )

    testCompile( project(':hibernate-testing') )
    testCompile( libraries.validation )
    testCompile( libraries.jandex )
    testCompile( libraries.classmate )
    testCompile( libraries.mockito )
    testCompile( libraries.validator ) {
        // for test runtime
        transitive = true
    }
    // for testing stored procedure support
    testCompile( libraries.derby )

    testRuntime( 'jaxen:jaxen:1.1' )
    testRuntime( libraries.javassist )
    testRuntime( libraries.unified_el )
}

mavenPom {
    name = 'Core Hibernate O/RM functionality'
    description = 'The core O/RM functionality as provided by Hibernate'
}

def osgiDescription() {
	return mavenPom.description
}

versionInjection {
    into( 'org.hibernate.Version', 'getVersionString' )
}

jar {
    manifest {
        mainAttributes( 'Main-Class': 'org.hibernate.Version' )

        instructionFirst 'Import-Package',
            'javax.security.auth;resolution:=optional',
            'javax.security.jacc;resolution:=optional',
            'javax.validation;resolution:=optional',
            'javax.validation.constraints;resolution:=optional',
            'javax.validation.groups;resolution:=optional',
            'javax.validation.metadata;resolution:=optional',
            // TODO: Shouldn't have to explicitly list this, but the plugin
            // generates it with a [1.0,2) version.
            'javax.persistence;version="2.1.0"',
            // Temporarily support JTA 1.1 -- Karaf and other frameworks still
            // use it.  Without this, the plugin generates [1.2,2).
            // build.gradle adds javax.transaction for all modules
            'javax.transaction.xa;version="[1.1,2)"',
            // optionals
            'javax.management;resolution:=optional',
            'javax.naming.event;resolution:=optional',
            'javax.naming.spi;resolution:=optional',
            'org.apache.tools.ant;resolution:=optional',
			'org.apache.tools.ant.taskdefs;resolution:=optional',
			'org.apache.tools.ant.types;resolution:=optional'

//        // TODO: Uncomment once EntityManagerFactoryBuilderImpl no longer
//        // uses ClassLoaderServiceImpl.
//        instruction 'Export-Package',
//            'org.hibernate.boot.registry.classloading.internal',
//            '*'
    }
}

ext {
	jaxbTargetDir = file( "${buildDir}/generated-src/jaxb/main" )
}

sourceSets.main {
    java.srcDir jaxbTargetDir
}

// resources inherently exclude sources
sourceSets.test.resources {
    setSrcDirs( ['src/test/java','src/test/resources'] )
}

idea {
	module {
		sourceDirs += file( "${buildDir}/generated-src/antlr/main" )
	}
}

xjc {
    outputDir = jaxbTargetDir

    schemas {
        cfg {
            xsd = file( 'src/main/resources/org/hibernate/xsd/cfg/legacy-configuration-4.0.xsd' )
            xjcBinding = file( 'src/main/xjb/hbm-configuration-bindings.xjb' )
        }
        hbm {
            xsd = file( 'src/main/resources/org/hibernate/xsd/mapping/legacy-mapping-4.0.xsd' )
            xjcBinding = file( 'src/main/xjb/hbm-mapping-bindings.xjb' )
            xjcExtensions = ['inheritance', 'simplify']
        }
    }
}


//sourceSets.main.sourceGeneratorsTask.dependsOn xjc
//sourceSets.main.sourceGeneratorsTask.dependsOn generateGrammarSource
tasks.compile.dependsOn generateGrammarSource


tasks."matrix_mariadb" {
    beforeTest { descriptor ->
        println "Starting test: " + descriptor
    }
}